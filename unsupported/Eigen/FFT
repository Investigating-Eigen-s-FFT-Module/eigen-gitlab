// This file is part of Eigen, a lightweight C++ template library
// for linear algebra.
//
// Copyright (C) 2009 Mark Borgerding mark a borgerding net
//
// This Source Code Form is subject to the terms of the Mozilla
// Public License v. 2.0. If a copy of the MPL was not distributed
// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

#ifndef EIGEN_FFT_MODULE_H
#define EIGEN_FFT_MODULE_H

#include "../../Eigen/Core"
#include "../../Eigen/src/Core/util/DisableStupidWarnings.h"

namespace Eigen {

enum FFTOptions : int {
  Dynamic = -0x1,
  Scaled = 0x0,
  Unscaled = 0x1,
  Real = 0x2,
  Complex = 0x4,
  InPlace = 0x8,  // may be specific to FFTW
  OutPlace = 0x10,
  Threaded = 0x11,  // TODO: may need more specific flags (threading implementation, nr threads ...)
  Serial = 0x12,
  Default = Scaled | OutPlace | Serial
  // TODO: Move these to the implementation-specific headers. Only here for now for reference.
  // FFTW API flags
  // PlanMeasure
  // PlanExhaustive (or patient or whatev it's called)
  // PlanWisdom // TODO: bother with this?
  // PlanEstimate
  // PocketFFT API flags
  // CacheTwiddles
};

namespace internal {
// traits here
}  // namespace internal

template <typename MatrixType_, int Options_ = FFTOptions::Default>
class FFT {
  // TODO: statically assert that MatrixType_ implements needed stuff

  typedef MatrixType_ MatrixType;
  typedef typename Base::Scalar Scalar;
  typedef typename Base::RealScalar RealScalar;

 public:
  // TODO: remove unnecessary
  enum : int {
    Options = Options_,
    MatrixOptions = MatrixType::Flags,
    RowsAtCompileTime = MatrixType::RowsAtCompileTime,
    ColsAtCompileTime = MatrixType::ColsAtCompileTime,
    SizeAtCompileTime = MatrixType::SizeAtCompileTime,
    MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,
    MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,
    MaxSizeAtCompileTime = MatrixType::MaxSizeAtCompileTime
  };

  typedef typename FwdMatrixType internal::traits<FFT>::FwdMatrixType;
  typedef typename InvMatrixType internal::traits<FFT>::InvMatrixType;

  FFT() {}

  FFT(const MatrixType& /*obj*/);

  FFT(Index rows, Index cols);

  FFT(Index size);

  // TODO: How to handle Copy, Assignment etc. of FFT?

  // TODO: binary call using unary

  
  // Draft for specializations:
  // Both rows and cols known @ compiletime
  //  rows == 1
  //   simply call default constructor
  //  cols == 1
  //   simply call default constructor
  //  else
  //   simply call default constructor
  // Only rows known at compiletime
  //  rows == 1
  //   max cols known at compiletime
  //     call constructor with runtime size arg
  //   else
  //     call constructor with runtime size arg
  // Only cols known at compiletime
  //  same as above
  // Neither rows nor cols known at compiletime
  //  call constructor with runtime size arg
  // UNLESS InPlace: Do not allocate at all

  // TODO: This general template case should probably never be reached, add error if so
  template <int RowsAtCompileTime, int ColsAtCompileTime, int MaxRowsAtCompileTime, int MaxColsAtCompileTime, int MatrixOptions, int Options>
  inline void allocate_fwd() {}
  template <int RowsAtCompileTime, int ColsAtCompileTime, int MaxRowsAtCompileTime, int MaxColsAtCompileTime, int MatrixOptions, int Options>
  inline void allocate_inv() {}

  const FwdMatrixType& fwd(const MatrixType& src) {

  }

  // TODO: inv calls, plan API calls

 private:
  // TODO: Handle run-time options
  const int m_opts;


  // TODO: Maybe handle this check statically too
  bool m_fwd_allocated;
  bool m_inv_allocated;

  FwdMatrixType m_fwd;
  InvMatrixType m_fwd;
};
}  // namespace Eigen

#include "../../Eigen/src/Core/util/ReenableStupidWarnings.h"

#endif
