// This file is part of Eigen, a lightweight C++ template library
// for linear algebra.
//
// Copyright (C) 2009 Mark Borgerding mark a borgerding net
//
// This Source Code Form is subject to the terms of the Mozilla
// Public License v. 2.0. If a copy of the MPL was not distributed
// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

#ifndef EIGEN_FFT_MODULE_H
#define EIGEN_FFT_MODULE_H

#include "../../Eigen/Core"
#include "../../Eigen/src/Core/util/DisableStupidWarnings.h"

namespace Eigen {

enum FFTOptions : int {
  Dynamic = -0x1,
  Scaled = 0x0,
  Unscaled = 0x1,
  Real = 0x2,
  Complex = 0x4,
  InPlace = 0x8,  // may be specific to FFTW
  OutPlace = 0x10,
  Threaded = 0x11,  // TODO: may need more specific flags (threading implementation, nr threads ...)
  Serial = 0x12,
  Default = Scaled | OutPlace | Serial,
  // TODO: Move these to the implementation-specific headers. Only here for now for reference.
  // FFTW API flags
  // PlanMeasure
  // PlanWisdom // TODO: bother with this?
  // PlanEstimate
  // PocketFFT API flags
  // CacheTwiddles
};

namespace internal {

  template <FFTOptions Options>
  struct fft_opt_traits {
    // TODO: Refine for C2R and create custom DenseBase that lazily computes antisymmetric coefficients
    using FwdReturnType = FFTType::Base::PlainObject;
    using InvReturnType = FFTType::Base::PlainObject;
  };
} // namespace internal

template <typename Derived, FFTOptions Options_ = FFTOptions::Default>
class FFT {
  // TODO: statically assert that Derived is a derived type of DenseBase (or set the template param in a more sensible way)
  using Base = DenseBase<Derived>; // TODO: find better name...
  using Scalar = Base::Scalar;
  using RealScalar = Base::RealScalar;
  using FwdReturnType = internal::fft_opt_traits<Options_>::FwdReturnType;
  using InvReturnType = internal::fft_opt_traits<Options_>::InvReturnType;

 public:
  // TODO: remove unnecessary
  enum : int {
    Options = Options_,
    RowsAtCompileTime = Base::RowsAtCompileTime,
    ColsAtCompileTime = Base::ColsAtCompileTime,
    SizeAtCompileTime = Base::SizeAtCompileTime,
    MaxRowsAtCompileTime = Base::MaxRowsAtCompileTime,
    MaxColsAtCompileTime = Base::MaxColsAtCompileTime,
    MaxSizeAtCompileTime = Base::MaxSizeAtCompileTime
    StorageKind = Base::StorageKind,
    IsVectorAtCompileTime = Base::IsVectorAtCompileTime,
  };

  FFT();

  FFT(const Base& /*obj*/);

  FFT(Index rows, Index cols);

  FFT(Index size);

  // TODO: How to handle Copy, Assignment etc. of FFT?

  template <typename OutputDerived>
  inline void fwd(const OutputDerived& dst, const Base& src) {
    // TODO: which checks to do beforehand?
    fwd_impl<Options, RowsAtCompileTime, ColsAtCompileTime, StorageKind>(dst.eval(), src.eval()); // eval to get plain objects with computed data in memory
  }

  inline FwdReturnType fwd(Base& src) {
    return fwd_impl<Options, RowsAtCompileTime, ColsAtCompileTime, StorageKind>(src.eval());
  }

 private:




  // TODO: Handle run-time options
  const int m_opts;
};
}  // namespace Eigen

#include "../../Eigen/src/Core/util/ReenableStupidWarnings.h"

#endif
